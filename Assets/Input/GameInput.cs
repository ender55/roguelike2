//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""3853a4b8-34a1-465a-bc8e-40f8d99827b8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""49f7399e-99cf-4939-a809-c1bcac2d51b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4df22764-3754-4ae5-9df3-9e23031f1e46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""a175c66f-30c9-41e0-b7ca-50cca26d41a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose First Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""845a2d0a-5320-490d-9ff7-0fb669198922"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose Second Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""b3c9bfa3-fb28-4dd7-9891-04ed59653340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose Third Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""89fa119a-2ddf-441e-a6f8-1f187e229691"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose Fourth Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""f57f88fa-7689-49a1-8e90-e05ca1a80c30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""2c0522cf-dfd7-48d9-9892-15643d58963a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""154e775e-e9b2-43c0-bebe-6f8c7d4edba3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""822979cb-cf66-478e-bf94-d85d6b0eba33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f7eeb4b7-204d-4305-a4ff-cdf79b299fff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e7762ad6-7eb0-4dfc-8212-938f005a2743"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b8d50bbc-cb31-4cb1-bfe2-387e9e2e748f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b15a4341-8b5f-490a-94d1-cf72406dd69a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff47a6e9-4c48-4693-afd5-b8c968586781"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3317c06e-ba09-497a-98a1-fae8dda785bf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose First Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbfa872a-2938-4dcd-aa5c-63bb40ffb43c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose Second Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a1bb201-3e07-41ee-a0d7-f0114e3db606"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose Third Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf044cee-50a9-4b0c-9e35-4fa94377bd27"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose Fourth Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b27bcba2-e66e-4b18-af5a-9b9a143ee386"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""883fb12b-c277-46c8-8427-dd5d181aa0b2"",
            ""actions"": [
                {
                    ""name"": ""Close Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""2e90164e-9cb2-4ff3-bd95-5f28d5cdf344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed8ea3b8-91f6-49e0-9483-cf507b63eb69"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Look = m_Gameplay.FindAction("Look", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_ChooseFirstWeapon = m_Gameplay.FindAction("Choose First Weapon", throwIfNotFound: true);
        m_Gameplay_ChooseSecondWeapon = m_Gameplay.FindAction("Choose Second Weapon", throwIfNotFound: true);
        m_Gameplay_ChooseThirdWeapon = m_Gameplay.FindAction("Choose Third Weapon", throwIfNotFound: true);
        m_Gameplay_ChooseFourthWeapon = m_Gameplay.FindAction("Choose Fourth Weapon", throwIfNotFound: true);
        m_Gameplay_OpenInventory = m_Gameplay.FindAction("Open Inventory", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CloseInventory = m_UI.FindAction("Close Inventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Look;
    private readonly InputAction m_Gameplay_Attack;
    private readonly InputAction m_Gameplay_ChooseFirstWeapon;
    private readonly InputAction m_Gameplay_ChooseSecondWeapon;
    private readonly InputAction m_Gameplay_ChooseThirdWeapon;
    private readonly InputAction m_Gameplay_ChooseFourthWeapon;
    private readonly InputAction m_Gameplay_OpenInventory;
    public struct GameplayActions
    {
        private @GameInput m_Wrapper;
        public GameplayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Look => m_Wrapper.m_Gameplay_Look;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputAction @ChooseFirstWeapon => m_Wrapper.m_Gameplay_ChooseFirstWeapon;
        public InputAction @ChooseSecondWeapon => m_Wrapper.m_Gameplay_ChooseSecondWeapon;
        public InputAction @ChooseThirdWeapon => m_Wrapper.m_Gameplay_ChooseThirdWeapon;
        public InputAction @ChooseFourthWeapon => m_Wrapper.m_Gameplay_ChooseFourthWeapon;
        public InputAction @OpenInventory => m_Wrapper.m_Gameplay_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLook;
                //@Attack.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                //@Attack.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @ChooseFirstWeapon.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFirstWeapon;
                @ChooseFirstWeapon.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFirstWeapon;
                @ChooseFirstWeapon.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFirstWeapon;
                @ChooseSecondWeapon.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseSecondWeapon;
                @ChooseSecondWeapon.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseSecondWeapon;
                @ChooseSecondWeapon.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseSecondWeapon;
                @ChooseThirdWeapon.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseThirdWeapon;
                @ChooseThirdWeapon.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseThirdWeapon;
                @ChooseThirdWeapon.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseThirdWeapon;
                @ChooseFourthWeapon.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFourthWeapon;
                @ChooseFourthWeapon.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFourthWeapon;
                @ChooseFourthWeapon.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChooseFourthWeapon;
                //@OpenInventory.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenInventory;
                //@OpenInventory.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenInventory;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                //@Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                //@Attack.canceled += instance.OnAttack;
                @ChooseFirstWeapon.started += instance.OnChooseFirstWeapon;
                @ChooseFirstWeapon.performed += instance.OnChooseFirstWeapon;
                @ChooseFirstWeapon.canceled += instance.OnChooseFirstWeapon;
                @ChooseSecondWeapon.started += instance.OnChooseSecondWeapon;
                @ChooseSecondWeapon.performed += instance.OnChooseSecondWeapon;
                @ChooseSecondWeapon.canceled += instance.OnChooseSecondWeapon;
                @ChooseThirdWeapon.started += instance.OnChooseThirdWeapon;
                @ChooseThirdWeapon.performed += instance.OnChooseThirdWeapon;
                @ChooseThirdWeapon.canceled += instance.OnChooseThirdWeapon;
                @ChooseFourthWeapon.started += instance.OnChooseFourthWeapon;
                @ChooseFourthWeapon.performed += instance.OnChooseFourthWeapon;
                @ChooseFourthWeapon.canceled += instance.OnChooseFourthWeapon;
                //@OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                //@OpenInventory.canceled += instance.OnOpenInventory;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_CloseInventory;
    public struct UIActions
    {
        private @GameInput m_Wrapper;
        public UIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseInventory => m_Wrapper.m_UI_CloseInventory;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                //@CloseInventory.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseInventory;
                //@CloseInventory.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseInventory;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                //@CloseInventory.started += instance.OnCloseInventory;
                @CloseInventory.performed += instance.OnCloseInventory;
                //@CloseInventory.canceled += instance.OnCloseInventory;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnChooseFirstWeapon(InputAction.CallbackContext context);
        void OnChooseSecondWeapon(InputAction.CallbackContext context);
        void OnChooseThirdWeapon(InputAction.CallbackContext context);
        void OnChooseFourthWeapon(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnCloseInventory(InputAction.CallbackContext context);
    }
}
